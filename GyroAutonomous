package org.firstinspires.ftc.teamcode;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAcceleratio nIntegrator;
import com.qualcomm.hardware.lynx.LynxModule;
import com.qualcomm.robotcore.hardware.Servo;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import org.firstinspires.ftc.robotcore.external.Func;
import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import org.firstinspires.ftc.robotcore.external.navigation.Velocity;

import java.util.List;
import org.firstinspires.ftc.robotcore.external.ClassFactory;


@Autonomous(name = "AutoMecanum", group = "Concept")

public class AutoMecanumDistance extends LinearOpMode {
  BNO055IMU imu;  
  
    

   
    private ElapsedTime runtime = new ElapsedTime();
    
    
    private DcMotor frontleftmotor = null;
    private DcMotor frontrightmotor = null;
    private DcMotor backleftmotor = null;
    private DcMotor backrightmotor = null;
    double frontleftpower = 0.4;
    double backleftpower = 0.4;
    double frontrightpower = 0.4;
    double backrightpower = 0.4;
    
    
  

    @Override
    public void runOpMode() {
        frontleftmotor = hardwareMap.get(DcMotor.class, "frontleftmotor");
        frontrightmotor = hardwareMap.get(DcMotor.class, "frontrightmotor");
        backrightmotor = hardwareMap.get(DcMotor.class, "backrightmotor");
        backleftmotor = hardwareMap.get(DcMotor.class, "backleftmotor");
        //frontleftmotor.setDirection(DcMotor.Direction.REVERSE);
        //backleftmotor.setDirection(DcMotor.Direction.REVERSE);
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        parameters.accelUnit = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        parameters.calibrationDataFile = "BNO055IMUCalibration.json"; // see the calibration sample opmode
        parameters.loggingEnabled = true;
        parameters.loggingTag = "IMU";
        parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();

        // Retrieve and initialize the IMU. We expect the IMU to be attached to an I2C port
        // on a Core Device Interface Module, configured to be a sensor of type "AdaFruit IMU",
        // and named "imu".
        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters);

        waitForStart();
        composeTelemetry();
        DistanceFormula(5, 3, 4, 5);
        }
    

   
    private void moveForward(int sleep){
      frontrightmotor.setPower(frontrightpower);
      frontleftmotor.setPower(-frontleftpower);
      backrightmotor.setPower(backrightpower);
      backleftmotor.setPower(-backleftpower);
      sleep(sleep);
      
    }
    
    private void moveBackward(int sleep){
      frontrightmotor.setPower(-frontrightpower);
      frontleftmotor.setPower(frontleftpower);
      backrightmotor.setPower(-backrightpower);
      backleftmotor.setPower(backrightpower);
      sleep(sleep);
    }
    
    
    private void spinleft(int degrees){
      frontrightmotor.setPower(frontrightpower);
      frontleftmotor.setPower(frontleftpower);
      backrightmotor.setPower(backrightpower);
      backleftmotor.setPower(backleftpower);
     sleep(sleep);
    }
    
    private void spinright(int degrees){
      frontrightmotor.setPower(-frontrightpower);
      frontleftmotor.setPower(-frontleftpower);
      backrightmotor.setPower(-backrightpower);
      backleftmotor.setPower(-backleftpower);
      sleep(sleep);
    }
    
    private void straferight(int sleep) {
      frontleftmotor.setPower(-frontleftpower);
      backleftmotor.setPower(backleftpower);
      frontrightmotor.setPower(-frontrightpower);
      backrightmotor.setPower(backrightpower);
      sleep(sleep);
    }
    
    private void strafeleft(int sleep) {
      frontleftmotor.setPower(frontleftpower);
      backleftmotor.setPower(-backleftpower);
      frontrightmotor.setPower(frontrightpower);
      backrightmotor.setPower(-backrightpower);
      sleep(sleep);
      }

    private void stopMotor() {
      frontleftmotor.setPower(0.0);
      backleftmotor.setPower(0.0);
      frontrightmotor.setPower(0.0);
      backrightmotor.setPower(0.0);
    }
      
    
    private static double DistanceFormulaw/Angle(double x1, double y1, double x2, double y2) {
      double x3 = x2+0.75
      double y3 = y3+0.75
      double final_x = Math.pow(x2-x1, 2);
      double final_y = Math.pow(y2-y1, 2);
      double distance = (Math.sqrt(final_x+final_y))*60.96;
      double numerator = y2*(x1-x3) + y1*(x3-x2) + y3*(x2-x1);
      double denominator = (x2-x1)*(x1-x3) + (y2-y1)*(y1-y3);
      double ratio = numerator/denominator;
      double angleRad = Math.Atan(ratio);
      double angleDeg = (angleRad*180)/Math.PI;
      if(angleDeg<0){
        angleDeg = 180+angleDeg;
        }
      return angleDeg;
      System.out.println(angleDeg);
      System.out.println(distance); }
      //telemtry.addLine();
    }
    private static int forward_backward_to_secs(distance){
      int first_step = 13;
      int next_steps = 8;
      int sleep = Math.rint((((distance-first_step)/next_steps)*100)+100);
      return sleep;
    }
    private static void forward_backward(string direction) {
       if (direction == "f") {
          moveForward(sleep);
          stopMotor();
       }
       
       if (direction == "b") {
          moveBackward(sleep);
          stopMotor();
       }
      }

    private static void rotation(angleDeg) {
      int degrees = Math.rint(8.05*angleDeg);
      if (x1<x2) {
        spinright(degrees);
        //stopMotor();
        if (angles.firstAngle < angleDeg) {
          spinright();
        }
        else{
          stopMotor();
        }

        if (angles.firstAngle > angleDeg) {
          spinleft();
          }
        else{
          stopMotor();
        }
      }
      if (x1>x2) {
        spinleft(degrees);
        //stopMotor();
        if (angles.firstAngle < angleDeg) {
          spinleft();
        }
        else{
          stopMotor();
        }

        if (angles.firstAngle > angleDeg) {
          spinright();
        else{
          stopMotor();
        }
        }
      }
    }

    private static int strafelandr(distance) {
      int sleep = Math.rint(distance/33.3333333333);
      return sleep;
    }
    
    private static void strafedistance(string direction) {
      if (string = "r") {
        straferight(sleep);
        stopMotor();
        }
      
      if (string = "l") {
        strafeleft(sleep);
        stopMotor();
      }
    }

    void composeTelemetry() {
    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
    gravity = imu.getGravity();
  }
  });

    telemetry.addLine()
    .addData("status", new Func<String>() {
    @Override public String value() {
    return imu.getSystemStatus().toShortString();
  }
  })
    .addData("calib", new Func<String>() {
    @Override public String value() {
    return imu.getCalibrationStatus().toString();
  }
  });

    telemetry.addLine()
    .addData("heading", new Func<String>() {
    @Override public String value() {
    return formatAngle(angles.angleUnit, angles.firstAngle);
  }
  })
    .addData("roll", new Func<String>() {
    @Override public String value() {
    return formatAngle(angles.angleUnit, angles.secondAngle);
  }
  })
    .addData("pitch", new Func<String>() {
    @Override public String value() {
    return formatAngle(angles.angleUnit, angles.thirdAngle);
  }
  });

    telemetry.addLine()
    .addData("grvty", new Func<String>() {
    @Override public String value() {
    return gravity.toString();
  }
  })
    .addData("mag", new Func<String>() {
    @Override public String value() {
    return String.format(Locale.getDefault(), "%.3f",
    Math.sqrt(gravity.xAccel*gravity.xAccel
    + gravity.yAccel*gravity.yAccel
    + gravity.zAccel*gravity.zAccel));
  }
  });
  }

    String formatAngle(AngleUnit angleUnit, double angle) {
    return formatDegrees(AngleUnit.DEGREES.fromUnit(angleUnit , angle));
  }

    String formatDegrees(double degrees){
    return String.format(Locale.getDefault(), "%.1f", AngleUnit.DEGREES.normalize(degrees));
}

}

    private void autonomous() {
        //moveForward();
      strafeleft();
      sleep(200);
      stop();
    }
}
